Saiba quando utilizar o TDD
O TDD é excelente para projetos onde a qualidade do código é uma prioridade. Ele ajuda a garantir que o software funcione conforme o esperado desde o início.

Em ambientes onde os requisitos mudam com frequência, o TDD permite ajustes rápidos e seguros, mantendo a integridade do software.

Para projetos mais complexos, o TDD ajuda a decompor o problema em partes menores e mais gerenciáveis, facilitando o desenvolvimento e a detecção de erros.

Quando ele não é o ideal
Se o tempo é um fator crítico, o projeto está atrasado ou com um prazo curto para a entrega final, a implementação do TDD pode não ser a melhor escolha – devido ao tempo adicional necessário para escrever e manter os testes.

Para projetos que exigem uma prototipagem rápida, o TDD pode atrasar o processo. E, por último, se a equipe de desenvolvimento não está acostumada com o TDD, a eficiência do projeto pode ser afetada – e, neste caso, o ideal seria oferecer cursos, palestras ou workshops sobre o assunto antes do projeto se iniciar.

-------------------------------------------------------------

Quando não usar o TDD?
Há um questionamento por trás do uso do Test-Driven Development. Será que é mesmo preciso usar o TDD em todos os casos de programação? 

O TDD é a evolução da sua lógica e do algoritmo que está sendo criado, obtendo feedbacks através deles - o que agrega bastante seu valor. Se você sabe qual é a solução mais genérica possível para aquele problema e este não necessita de uma documentação detalhada sobre seu funcionamento, por ser facilmente compreendido por quem o enfrenta, não perca tempo e parta logo para a solução, afinal o que conta é a simplicidade do seu processo.

Em situações como essa, caso você já tenha conhecimento de qual caminho seguir, é possível sim deixar o Test-Driven Development de lado e não usá-lo, partindo direto para essa lógica.

Busca-se escrever testes para vários métodos, inclusive para os muito simples, como getters e setters. Portanto, não há a necessidade de escrever um teste automatizado para esses métodos, justamente por eles serem muito simples, são linhas de programação que não agregam nenhum valor para o produto final.

Ainda assim, é preciso estar atento à seguinte afirmação: “Regra simples não precisa de teste automatizado”. Essa ideia é incompleta, pois quando nos referimos a isso, estamos falando de simplicidade de código, códigos muito simples, como os citados getters e setters - geralmente, de uma ou duas linhas.

Alguns dos erros mais comuns na prática do TDD é escrever esses testes e não enxergar suas respectivas falhas. Dê atenção aos testes que falham, ao aplicar o TDD e não obter nenhum resultado de falha no teste, suspeite de que há algo de errado.

Sugerimos adotar o TDD para correção de bugs. O bug é por natureza um cenário do sistema que falha. Então, replicá-lo por meio de testes automatizados é uma atividade bem natural para o desenvolvedor. 


-------------------------------------------------------------------------


Quando usar TDD
Se o projeto no qual você está trabalhando tem uma expectativa de muitos recursos e uma longa vida útil, o TDD é a alternativa certa para gerenciar o controle de qualidade do seu código.

Dessa forma, os testes que foram criados antes vão servir para mostrar se o código tem bugs ou não caso haja a necessidade de voltarmos para uma funcionalidade antiga e adicionarmos mais algum código.
--------------------------------------------------------------------------
Quando não usar
Um dos casos que não faz sentido seguir o TDD é quando estamos desenvolvendo alguma demo de aplicação e queremos apenas mostrar que é possível realizar esse desenvolvimento.

Além do mais, não se faz necessário realizar testes em funcionalidades externas, ou seja, de bibliotecas ou frameworks. Mas caso o seu código seja dependente deste código externo, utilize objetos mocks, que são estruturas que simulam um comportamento de uma função para auxiliar neste desenvolvimento. 